version: 2.1

# define the parameters from the setup config.
parameters:
  always-continue:
    type: boolean
    default: false
  pipeline-service1:
    type: boolean
    default: false
  pipeline-service2:
    type: boolean
    default: false
  pipeline-lib1:
    type: boolean
    default: false

executors:
  openjdk:
    docker:
      - image: 'cimg/openjdk:17.0'

commands:
  ## services commands
  ### gcloud commands
  gcloud_setting:
    steps:
      - run:
          name: Install Gcloud Command & Authorize Google Cloud
          command: |
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            sudo apt-get -y update && sudo apt-get -y install google-cloud-cli
            echo ${GCP_SERVICE_ACCOUNT_KEY} | base64 -d | gcloud auth activate-service-account --key-file=-
  ### pre build fhase commands
  test_and_analyze:
    steps:
      - run:
          name: Unit Test & Analyze on SonarCloud
          command: mvn verify sonar:sonar -Dsonar.projectKey=${SONAR_PROJECT_KEY} -DsonarOrganization=${SONAR_ORGANIZATION}
  dockerfile_analyze:
    steps:
      - run:
          name: Dockerfile Lint
          command: docker run --rm -i hadolint/hadolint <./build/Dockerfile
  ### build phase commands
  check-image-existence:
    steps:
      - run:
          name: Set Image Tag Name
          command: |
            IMAGE_TAG=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            echo "export IMAGE_TAG=${IMAGE_TAG}" >> $BASH_ENV
      - run:
          name: Check Image Existence in Artifact Registry
          command: |
            if gcloud artifacts docker images list ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}/sample-springboot-cloudrun/helloworld --include-tags --filter="tags:${IMAGE_TAG}" | grep "${IMAGE_TAG}"; then
              echo "Image: ${IMAGE_TAG} already exists in Artifact Registry. Stop the Workflow."
              exit 1
            else
              echo "Image: ${IMAGE_TAG} does not exist in Artifact Registry. Proceeding with the Workflow."
            fi
  image_build:
    steps:
      - run:
          name: Image Build
          command: mvn clean package docker:build 
            -DskipTests=True 
            -DgoogleCloudRegion=${GCP_REGION} 
            -DgoogleCloudProjectId=${GCP_PROJECT}
  image_push:
    steps:
      - run:
          name: Configure Authentication
          command: gcloud auth configure-docker ${GCP_REGION}-docker.pkg.dev --quiet
      - run:
          name: Image Push
          command: mvn docker:push
            -DgoogleCloudRegion=${GCP_REGION} 
            -DgoogleCloudProjectId=${GCP_PROJECT}
  ### deploy phase commands
  # cloudrun_deploy:
  # xxx

  # sharedlibs commands
  sample-cmd:
    steps:
      - run:
          name: sample command
          command: echo "sample command"
